<Activity mc:Ignorable="sads" x:Class="Cloudbearing.TimeOffRequest.TimeOffRequest_Approval_Workflow.Workflow"
 xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities"
 xmlns:made="clr-namespace:Microsoft.Activities.Design.ExpressionTranslation;assembly=Microsoft.Activities.Design"
 xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
 xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities"
 xmlns:p="http://schemas.microsoft.com/workflow/2012/07/xaml/activities"
 xmlns:p1="wf://workflow.windows.net/$Activities"
 xmlns:s="clr-namespace:System;assembly=mscorlib"
 xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger"
 xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib"
 xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib"
 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <Sequence DisplayName="Stage 1" sads:DebugSymbol.Symbol="9xCUukrxY+NXUFMMSWpgFIGfa0U6XFNoYXJlcG9pbnRBcHBzXEZlcnJpcyBUaW1lT2ZmXENsb3VkYmVhcmluZy5UaW1lT2ZmUmVxdWVzdFxUaW1lT2ZmUmVxdWVzdCBBcHByb3ZhbCBXb3JrZmxvd1xXb3JrZmxvdy54YW1sNS0DtgQOAgEBTQVhGwMB7gFiBWJlAwHsAWMFkgEcAwHPAZMBBZ4BFwMBygGfAQWtARwDAcMBrgEFtAEZAwG/AbUBBc8BGQMBuQHQAQXUAwoCATDVAwX+AwoCARz/AwW0BAoCAQPGAQvMASkDAbwB1wEJ0gMUAgEz3AMJ/AMUAgEfhgQJsgQUAgEH2AEL2AGBAQMBtwHZAQvkAR0DAbIB5QEL8wEiAwGrAfQBC60CEAMBjwGuAgvaAhACAXzbAguEAxACAWGFAwuFA5IBAgFfhgML0QMQAgE03QML4wMfAgEt5AML7wMfAgEo8AML+wMWAgEghwQLjQQfAgEZjgQLmQQfAgEUmgQLpQQWAgEMpgQLsQQjAgEI+wEPqwIaAwGSAbUCD9gCGgIBf+ICD4IDGgIBZo0DD88DGgIBOf8BEYUCJQMBqAGGAhGRAiUDAaMBkgIRkgJ6AwGhAZMCEaMCHAMBlgGkAhGqAiUDAZMBtgIRwQIjAwGKAcICEdACKAMBgwHRAhHXAiUDAYAB4wIR4wJ9AgF65AIR7wIlAgF18AIRgAMcAgFpgQMRgQN6AgFnjgMRjgN+AgFdjwMRmgMjAgFYmwMRqQMoAgFRqgMRsAMlAgFOsQMRvAMlAgFJvQMRzQMcAgE8zgMRzgN7AgE6">
    <Sequence.Variables>
      <Variable x:TypeArguments="p:DynamicValue" x:Name="__ReferenceID0" Name="dv_0" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID1" Default="Default" Name="RequestStatus" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID19" Name="Approver1Text" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID23" Name="Approver2Text" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID26" Name="Approver3Text" />
      <Variable x:TypeArguments="x:String" Name="RequestedName" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID5" Name="Approver1StatusText" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID6" Name="Approver2StatusText" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID7" Name="Approver3StatusText" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID18" Name="Approver1Email" />
      <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID8" Name="RequestedBy" />
      <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID2" Name="Approver1Id" />
      <Variable x:TypeArguments="p:DynamicValue" x:Name="__ReferenceID17" Name="dv_1" />
      <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID3" Name="Approver2Id" />
      <Variable x:TypeArguments="x:Int32" x:Name="__ReferenceID4" Name="Approver3Id" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID22" Name="Approver2Email" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID25" Name="Approver3Email" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID16" Name="RequestedByName" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID15" Name="RequestedByEmail" />
      <Variable x:TypeArguments="p:DynamicValue" x:Name="__ReferenceID21" Name="dv_2" />
      <Variable x:TypeArguments="p:DynamicValue" x:Name="__ReferenceID24" Name="dv_3" />
      <Variable x:TypeArguments="p:DynamicValue" x:Name="__ReferenceID14" Name="dv_4" />
      <Variable x:TypeArguments="s:DateTime" x:Name="__ReferenceID9" Name="startDate" />
      <Variable x:TypeArguments="s:DateTime" x:Name="__ReferenceID10" Name="endDate" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID11" Name="approverUrl" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID12" Name="timeOffType" />
      <Variable x:TypeArguments="sco:Collection(x:String)" x:Name="__ReferenceID20" Name="emaillist" />
      <Variable x:TypeArguments="x:Int32" Name="keyIdDeptCalendar" />
      <Variable x:TypeArguments="x:String" x:Name="__ReferenceID13" Name="cancelStatus" />
    </Sequence.Variables>
    <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}">
      <p1:LookupSPListItem.ItemId>
        <InArgument x:TypeArguments="x:Int32">
          <p:ExpressionContainerValue x:TypeArguments="x:Int32">
            <p1:GetCurrentItemId />
          </p:ExpressionContainerValue>
        </InArgument>
      </p1:LookupSPListItem.ItemId>
      <p1:LookupSPListItem.ListId>
        <InArgument x:TypeArguments="s:Guid">
          <p:ExpressionContainerValue x:TypeArguments="s:Guid">
            <p1:GetCurrentListId />
          </p:ExpressionContainerValue>
        </InArgument>
      </p1:LookupSPListItem.ListId>
      <p1:LookupSPListItem.Result>
        <OutArgument x:TypeArguments="p:DynamicValue">
          <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dv_0">
            <p:ExpressionContainerReference.Arguments>
              <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dv_0">
                <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID0}" />
              </InOutArgument>
            </p:ExpressionContainerReference.Arguments>
            <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dv_0" />
          </p:ExpressionContainerReference>
        </OutArgument>
      </p1:LookupSPListItem.Result>
    </p1:LookupSPListItem>
    <p1:WriteToHistory Message="After Lookup" />
    <p:GetODataProperties DisplayName="GetDynamicValueProperties">
      <p:GetODataProperties.Source>
        <InArgument x:TypeArguments="p:DynamicValue">
          <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dv_0">
            <p:ExpressionContainerValue.Arguments>
              <InArgument x:TypeArguments="p:DynamicValue" x:Key="dv_0">
                <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID0}" />
              </InArgument>
            </p:ExpressionContainerValue.Arguments>
            <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dv_0" />
          </p:ExpressionContainerValue>
        </InArgument>
      </p:GetODataProperties.Source>
      <scg:Dictionary x:TypeArguments="x:String, OutArgument">
        <OutArgument x:TypeArguments="x:String" x:Key="Status">
          <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="RequestStatus">
            <p:ExpressionContainerReference.Arguments>
              <InOutArgument x:TypeArguments="x:String" x:Key="RequestStatus">
                <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID1}" />
              </InOutArgument>
            </p:ExpressionContainerReference.Arguments>
            <ArgumentReference x:TypeArguments="x:String" ArgumentName="RequestStatus" />
          </p:ExpressionContainerReference>
        </OutArgument>
        <OutArgument x:TypeArguments="x:Int32" x:Key="Approver1Id">
          <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="Approver1Id">
            <p:ExpressionContainerReference.Arguments>
              <InOutArgument x:TypeArguments="x:Int32" x:Key="Approver1Id">
                <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID2}" />
              </InOutArgument>
            </p:ExpressionContainerReference.Arguments>
            <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="Approver1Id" />
          </p:ExpressionContainerReference>
        </OutArgument>
        <OutArgument x:TypeArguments="x:Int32" x:Key="Approver2Id">
          <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="Approver2Id">
            <p:ExpressionContainerReference.Arguments>
              <InOutArgument x:TypeArguments="x:Int32" x:Key="Approver2Id">
                <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID3}" />
              </InOutArgument>
            </p:ExpressionContainerReference.Arguments>
            <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="Approver2Id" />
          </p:ExpressionContainerReference>
        </OutArgument>
        <OutArgument x:TypeArguments="x:Int32" x:Key="Approver3Id">
          <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="Approver3Id">
            <p:ExpressionContainerReference.Arguments>
              <InOutArgument x:TypeArguments="x:Int32" x:Key="Approver3Id">
                <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID4}" />
              </InOutArgument>
            </p:ExpressionContainerReference.Arguments>
            <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="Approver3Id" />
          </p:ExpressionContainerReference>
        </OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="Approver1Status">
          <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="Approver1StatusText">
            <p:ExpressionContainerReference.Arguments>
              <InOutArgument x:TypeArguments="x:String" x:Key="Approver1StatusText">
                <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID5}" />
              </InOutArgument>
            </p:ExpressionContainerReference.Arguments>
            <ArgumentReference x:TypeArguments="x:String" ArgumentName="Approver1StatusText" />
          </p:ExpressionContainerReference>
        </OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="Approver2Status">
          <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="Approver2StatusText">
            <p:ExpressionContainerReference.Arguments>
              <InOutArgument x:TypeArguments="x:String" x:Key="Approver2StatusText">
                <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID6}" />
              </InOutArgument>
            </p:ExpressionContainerReference.Arguments>
            <ArgumentReference x:TypeArguments="x:String" ArgumentName="Approver2StatusText" />
          </p:ExpressionContainerReference>
        </OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="Approver3Status">
          <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="Approver3StatusText">
            <p:ExpressionContainerReference.Arguments>
              <InOutArgument x:TypeArguments="x:String" x:Key="Approver3StatusText">
                <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID7}" />
              </InOutArgument>
            </p:ExpressionContainerReference.Arguments>
            <ArgumentReference x:TypeArguments="x:String" ArgumentName="Approver3StatusText" />
          </p:ExpressionContainerReference>
        </OutArgument>
        <OutArgument x:TypeArguments="x:Int32" x:Key="RequestedById">
          <p:ExpressionContainerReference x:TypeArguments="x:Int32" DisplayName="RequestedBy">
            <p:ExpressionContainerReference.Arguments>
              <InOutArgument x:TypeArguments="x:Int32" x:Key="RequestedBy">
                <VariableReference x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID8}" />
              </InOutArgument>
            </p:ExpressionContainerReference.Arguments>
            <ArgumentReference x:TypeArguments="x:Int32" ArgumentName="RequestedBy" />
          </p:ExpressionContainerReference>
        </OutArgument>
        <OutArgument x:TypeArguments="s:DateTime" x:Key="StartDateTime">
          <p:ExpressionContainerReference x:TypeArguments="s:DateTime" DisplayName="startDate">
            <p:ExpressionContainerReference.Arguments>
              <InOutArgument x:TypeArguments="s:DateTime" x:Key="startDate">
                <VariableReference x:TypeArguments="s:DateTime" Variable="{x:Reference __ReferenceID9}" />
              </InOutArgument>
            </p:ExpressionContainerReference.Arguments>
            <ArgumentReference x:TypeArguments="s:DateTime" ArgumentName="startDate" />
          </p:ExpressionContainerReference>
        </OutArgument>
        <OutArgument x:TypeArguments="s:DateTime" x:Key="EndDateTime">
          <p:ExpressionContainerReference x:TypeArguments="s:DateTime" DisplayName="endDate">
            <p:ExpressionContainerReference.Arguments>
              <InOutArgument x:TypeArguments="s:DateTime" x:Key="endDate">
                <VariableReference x:TypeArguments="s:DateTime" Variable="{x:Reference __ReferenceID10}" />
              </InOutArgument>
            </p:ExpressionContainerReference.Arguments>
            <ArgumentReference x:TypeArguments="s:DateTime" ArgumentName="endDate" />
          </p:ExpressionContainerReference>
        </OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="ApproverUrl">
          <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="approverUrl">
            <p:ExpressionContainerReference.Arguments>
              <InOutArgument x:TypeArguments="x:String" x:Key="approverUrl">
                <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID11}" />
              </InOutArgument>
            </p:ExpressionContainerReference.Arguments>
            <ArgumentReference x:TypeArguments="x:String" ArgumentName="approverUrl" />
          </p:ExpressionContainerReference>
        </OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="TimeOffType">
          <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="timeOffType">
            <p:ExpressionContainerReference.Arguments>
              <InOutArgument x:TypeArguments="x:String" x:Key="timeOffType">
                <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID12}" />
              </InOutArgument>
            </p:ExpressionContainerReference.Arguments>
            <ArgumentReference x:TypeArguments="x:String" ArgumentName="timeOffType" />
          </p:ExpressionContainerReference>
        </OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="CancelStatus">
          <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="cancelStatus">
            <p:ExpressionContainerReference.Arguments>
              <InOutArgument x:TypeArguments="x:String" x:Key="cancelStatus">
                <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID13}" />
              </InOutArgument>
            </p:ExpressionContainerReference.Arguments>
            <ArgumentReference x:TypeArguments="x:String" ArgumentName="cancelStatus" />
          </p:ExpressionContainerReference>
        </OutArgument>
      </scg:Dictionary>
    </p:GetODataProperties>
    <p1:LookupSPUser DisplayName="LookupRequester">
      <p1:LookupSPUser.PrincipalId>
        <InArgument x:TypeArguments="x:Int32">
          <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="RequestedBy">
            <p:ExpressionContainerValue.Arguments>
              <InArgument x:TypeArguments="x:Int32" x:Key="RequestedBy">
                <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID8}" />
              </InArgument>
            </p:ExpressionContainerValue.Arguments>
            <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="RequestedBy" />
          </p:ExpressionContainerValue>
        </InArgument>
      </p1:LookupSPUser.PrincipalId>
      <p1:LookupSPUser.Result>
        <OutArgument x:TypeArguments="p:DynamicValue">
          <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dv_4">
            <p:ExpressionContainerReference.Arguments>
              <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dv_4">
                <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID14}" />
              </InOutArgument>
            </p:ExpressionContainerReference.Arguments>
            <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dv_4" />
          </p:ExpressionContainerReference>
        </OutArgument>
      </p1:LookupSPUser.Result>
    </p1:LookupSPUser>
    <p:GetODataProperties DisplayName="GetRequester">
      <p:GetODataProperties.Source>
        <InArgument x:TypeArguments="p:DynamicValue">
          <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dv_4">
            <p:ExpressionContainerValue.Arguments>
              <InArgument x:TypeArguments="p:DynamicValue" x:Key="dv_4">
                <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID14}" />
              </InArgument>
            </p:ExpressionContainerValue.Arguments>
            <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dv_4" />
          </p:ExpressionContainerValue>
        </InArgument>
      </p:GetODataProperties.Source>
      <scg:Dictionary x:TypeArguments="x:String, OutArgument">
        <OutArgument x:TypeArguments="x:String" x:Key="Email">
          <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="RequestedByEmail">
            <p:ExpressionContainerReference.Arguments>
              <InOutArgument x:TypeArguments="x:String" x:Key="RequestedByEmail">
                <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID15}" />
              </InOutArgument>
            </p:ExpressionContainerReference.Arguments>
            <ArgumentReference x:TypeArguments="x:String" ArgumentName="RequestedByEmail" />
          </p:ExpressionContainerReference>
        </OutArgument>
        <OutArgument x:TypeArguments="x:String" x:Key="Title">
          <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="RequestedByName">
            <p:ExpressionContainerReference.Arguments>
              <InOutArgument x:TypeArguments="x:String" x:Key="RequestedByName">
                <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID16}" />
              </InOutArgument>
            </p:ExpressionContainerReference.Arguments>
            <ArgumentReference x:TypeArguments="x:String" ArgumentName="RequestedByName" />
          </p:ExpressionContainerReference>
        </OutArgument>
      </scg:Dictionary>
    </p:GetODataProperties>
    <p1:WriteToHistory>
      <p1:WriteToHistory.Message>
        <InArgument x:TypeArguments="x:String">
          <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Request Status:&quot; + RequestStatus + &quot;|Approver 1:&quot; + Approver1Id">
            <p:ExpressionContainerValue.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="RequestStatus">
                <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID1}" />
              </InArgument>
              <InArgument x:TypeArguments="x:Int32" x:Key="Approver1Id">
                <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID2}" />
              </InArgument>
            </p:ExpressionContainerValue.Arguments>
            <p:ConcatString>
              <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                <p:ConcatString>
                  <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                    <p:ConcatString>
                      <p:ConcatString.Result>
                        <OutArgument x:TypeArguments="x:String" />
                      </p:ConcatString.Result>
                      <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="Request Status:" />
                      <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestStatus" />
                      </InArgument>
                    </p:ConcatString>
                  </InArgument>
                  <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="|Approver 1:" />
                </p:ConcatString>
              </InArgument>
              <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                <p:Convert x:TypeArguments="x:Int32, x:String">
                  <InArgument x:TypeArguments="x:Int32">
                    <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="Approver1Id" />
                  </InArgument>
                </p:Convert>
              </InArgument>
            </p:ConcatString>
          </p:ExpressionContainerValue>
        </InArgument>
      </p1:WriteToHistory.Message>
    </p1:WriteToHistory>
    <p1:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}">
      <p1:UpdateListItem.ItemId>
        <InArgument x:TypeArguments="x:Int32">
          <p:ExpressionContainerValue x:TypeArguments="x:Int32">
            <p1:GetCurrentItemId />
          </p:ExpressionContainerValue>
        </InArgument>
      </p1:UpdateListItem.ItemId>
      <p1:UpdateListItem.ListId>
        <InArgument x:TypeArguments="s:Guid">
          <p:ExpressionContainerValue x:TypeArguments="s:Guid">
            <p1:GetCurrentListId />
          </p:ExpressionContainerValue>
        </InArgument>
      </p1:UpdateListItem.ListId>
      <p1:UpdateListItem.ListItemPropertiesDynamicValue>
        <InArgument x:TypeArguments="p:DynamicValue">
          <p:SetDynamicValueProperties>
            <scg:Dictionary x:TypeArguments="x:String, InArgument">
              <InArgument x:TypeArguments="x:String" x:Key="Title">
                <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="RequestedByName">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="RequestedByName">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID16}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestedByName" />
                </p:ExpressionContainerValue>
              </InArgument>
            </scg:Dictionary>
          </p:SetDynamicValueProperties>
        </InArgument>
      </p1:UpdateListItem.ListItemPropertiesDynamicValue>
    </p1:UpdateListItem>
    <If>
      <If.Condition>
        <InArgument x:TypeArguments="x:Boolean">
          <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="RequestStatus == &quot;Pending Approval&quot;">
            <p:ExpressionContainerValue.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="RequestStatus">
                <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID1}" />
              </InArgument>
            </p:ExpressionContainerValue.Arguments>
            <p:IsEqualString Pattern="{x:Null}" Text="Pending Approval">
              <p:IsEqualString.Input>
                <InArgument x:TypeArguments="x:String">
                  <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestStatus" />
                </InArgument>
              </p:IsEqualString.Input>
            </p:IsEqualString>
          </p:ExpressionContainerValue>
        </InArgument>
      </If.Condition>
      <If.Then>
        <Sequence>
          <p1:WriteToHistory Message="Inside main status Pending Approval" />
          <p1:LookupSPUser DisplayName="LookupApprover1">
            <p1:LookupSPUser.PrincipalId>
              <InArgument x:TypeArguments="x:Int32">
                <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="Approver1Id">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:Int32" x:Key="Approver1Id">
                      <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID2}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="Approver1Id" />
                </p:ExpressionContainerValue>
              </InArgument>
            </p1:LookupSPUser.PrincipalId>
            <p1:LookupSPUser.Result>
              <OutArgument x:TypeArguments="p:DynamicValue">
                <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dv_1">
                  <p:ExpressionContainerReference.Arguments>
                    <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dv_1">
                      <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID17}" />
                    </InOutArgument>
                  </p:ExpressionContainerReference.Arguments>
                  <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dv_1" />
                </p:ExpressionContainerReference>
              </OutArgument>
            </p1:LookupSPUser.Result>
          </p1:LookupSPUser>
          <p:GetODataProperties DisplayName="GetApprover1">
            <p:GetODataProperties.Source>
              <InArgument x:TypeArguments="p:DynamicValue">
                <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dv_1">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="p:DynamicValue" x:Key="dv_1">
                      <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID17}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dv_1" />
                </p:ExpressionContainerValue>
              </InArgument>
            </p:GetODataProperties.Source>
            <scg:Dictionary x:TypeArguments="x:String, OutArgument">
              <OutArgument x:TypeArguments="x:String" x:Key="Email">
                <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="Approver1Email">
                  <p:ExpressionContainerReference.Arguments>
                    <InOutArgument x:TypeArguments="x:String" x:Key="Approver1Email">
                      <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID18}" />
                    </InOutArgument>
                  </p:ExpressionContainerReference.Arguments>
                  <ArgumentReference x:TypeArguments="x:String" ArgumentName="Approver1Email" />
                </p:ExpressionContainerReference>
              </OutArgument>
              <OutArgument x:TypeArguments="x:String" x:Key="Title">
                <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="Approver1Text">
                  <p:ExpressionContainerReference.Arguments>
                    <InOutArgument x:TypeArguments="x:String" x:Key="Approver1Text">
                      <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID19}" />
                    </InOutArgument>
                  </p:ExpressionContainerReference.Arguments>
                  <ArgumentReference x:TypeArguments="x:String" ArgumentName="Approver1Text" />
                </p:ExpressionContainerReference>
              </OutArgument>
            </scg:Dictionary>
          </p:GetODataProperties>
          <If DisplayName="Check Approver 1">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="Approver1StatusText == &quot;Pending Approval&quot;">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="Approver1StatusText">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID5}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <p:IsEqualString Pattern="{x:Null}" Text="Pending Approval">
                    <p:IsEqualString.Input>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="Approver1StatusText" />
                      </InArgument>
                    </p:IsEqualString.Input>
                  </p:IsEqualString>
                </p:ExpressionContainerValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence>
                <Sequence.Variables>
                  <Variable x:TypeArguments="p:DynamicValue" Name="dv_5" />
                </Sequence.Variables>
                <p1:WriteToHistory>
                  <p1:WriteToHistory.Message>
                    <InArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;in approver 1 email&quot; + Approver1Email">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="Approver1Email">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID18}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <p:ConcatString>
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="in approver 1 email" />
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="Approver1Email" />
                          </InArgument>
                        </p:ConcatString>
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p1:WriteToHistory.Message>
                </p1:WriteToHistory>
                <p:BuildCollection x:TypeArguments="x:String">
                  <p:BuildCollection.Result>
                    <OutArgument x:TypeArguments="sco:Collection(x:String)">
                      <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="emaillist">
                        <p:ExpressionContainerReference.Arguments>
                          <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="emaillist">
                            <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID20}" />
                          </InOutArgument>
                        </p:ExpressionContainerReference.Arguments>
                        <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="emaillist" />
                      </p:ExpressionContainerReference>
                    </OutArgument>
                  </p:BuildCollection.Result>
                  <p:BuildCollection.Values>
                    <InArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="Approver1Email">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="Approver1Email">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID18}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="Approver1Email" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p:BuildCollection.Values>
                </p:BuildCollection>
                <p1:WriteToHistory Message="After build collection" />
                <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" CC="{x:Null}">
                  <p1:Email.Body>
                    <InArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="RequestedByName + &quot; is requesting time off. \n\nTime off request details -\n Time off Type: &quot; + timeOffType + &quot;\n Start Date: &quot; + startDate.ToString() + &quot;\n End Date: &quot; + endDate.ToString() + &quot;\n\n Approve or Deny the request by copy and paste the url below in your browser:\n\n&quot; + approverUrl">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="RequestedByName">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID16}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="timeOffType">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID12}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:Object" x:Key="startDate">
                            <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID9}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:Object" x:Key="endDate">
                            <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID10}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="approverUrl">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID11}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <p:ConcatString>
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                            <p:ConcatString>
                              <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                <p:ConcatString>
                                  <p:ConcatString.Result>
                                    <OutArgument x:TypeArguments="x:String" />
                                  </p:ConcatString.Result>
                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                    <p:ConcatString>
                                      <p:ConcatString.Result>
                                        <OutArgument x:TypeArguments="x:String" />
                                      </p:ConcatString.Result>
                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                        <p:ConcatString>
                                          <p:ConcatString.Result>
                                            <OutArgument x:TypeArguments="x:String" />
                                          </p:ConcatString.Result>
                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                            <p:ConcatString>
                                              <p:ConcatString.Result>
                                                <OutArgument x:TypeArguments="x:String" />
                                              </p:ConcatString.Result>
                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                <p:ConcatString>
                                                  <p:ConcatString.Result>
                                                    <OutArgument x:TypeArguments="x:String" />
                                                  </p:ConcatString.Result>
                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                    <p:ConcatString>
                                                      <p:ConcatString.Result>
                                                        <OutArgument x:TypeArguments="x:String" />
                                                      </p:ConcatString.Result>
                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestedByName" />
                                                      </InArgument>
                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression=" is requesting time off. &#xA;&#xA;Time off request details -&#xA; Time off Type: " />
                                                    </p:ConcatString>
                                                  </InArgument>
                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="timeOffType" />
                                                  </InArgument>
                                                </p:ConcatString>
                                              </InArgument>
                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xA; Start Date: " />
                                            </p:ConcatString>
                                          </InArgument>
                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                            <p:ToString CultureName="{x:Null}" Format="{x:Null}">
                                              <p:ToString.Result>
                                                <OutArgument x:TypeArguments="x:String" />
                                              </p:ToString.Result>
                                              <InArgument x:TypeArguments="x:Object">
                                                <ArgumentValue x:TypeArguments="x:Object" ArgumentName="startDate" />
                                              </InArgument>
                                            </p:ToString>
                                          </InArgument>
                                        </p:ConcatString>
                                      </InArgument>
                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xA; End Date: " />
                                    </p:ConcatString>
                                  </InArgument>
                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                    <p:ToString CultureName="{x:Null}" Format="{x:Null}">
                                      <p:ToString.Result>
                                        <OutArgument x:TypeArguments="x:String" />
                                      </p:ToString.Result>
                                      <InArgument x:TypeArguments="x:Object">
                                        <ArgumentValue x:TypeArguments="x:Object" ArgumentName="endDate" />
                                      </InArgument>
                                    </p:ToString>
                                  </InArgument>
                                </p:ConcatString>
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xA;&#xA; Approve or Deny the request by copy and paste the url below in your browser:&#xA;&#xA;" />
                            </p:ConcatString>
                          </InArgument>
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="approverUrl" />
                          </InArgument>
                        </p:ConcatString>
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p1:Email.Body>
                  <p1:Email.Subject>
                    <InArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Request for Time off approval by &quot; + RequestedByName">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="RequestedByName">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID16}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <p:ConcatString>
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="Request for Time off approval by " />
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestedByName" />
                          </InArgument>
                        </p:ConcatString>
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p1:Email.Subject>
                  <p1:Email.To>
                    <InArgument x:TypeArguments="sco:Collection(x:String)">
                      <p:ExpressionContainerValue x:TypeArguments="sco:Collection(x:String)" DisplayName="emaillist">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="emaillist">
                            <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID20}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="emaillist" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p1:Email.To>
                </p1:Email>
                <p1:WriteToHistory>
                  <p1:WriteToHistory.Message>
                    <InArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Email sent to : &quot; + emaillist[0]">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="scg:ICollection(x:String)" x:Key="emaillist">
                            <VariableValue x:TypeArguments="scg:ICollection(x:String)" Variable="{x:Reference __ReferenceID20}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <p:ConcatString>
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="Email sent to : " />
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                            <p:GetItemFromCollection x:TypeArguments="x:String" Index="0">
                              <InArgument x:TypeArguments="scg:ICollection(x:String)">
                                <ArgumentValue x:TypeArguments="scg:ICollection(x:String)" ArgumentName="emaillist" />
                              </InArgument>
                            </p:GetItemFromCollection>
                          </InArgument>
                        </p:ConcatString>
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p1:WriteToHistory.Message>
                </p1:WriteToHistory>
              </Sequence>
            </If.Then>
          </If>
          <If DisplayName="Get Approver 2">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="Approver2Id &gt; 0">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:Int32" x:Key="Approver2Id">
                      <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID3}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <p:IsGreaterThan x:TypeArguments="x:Int32">
                    <p:IsGreaterThan.Left>
                      <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                        <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="Approver2Id" />
                      </InArgument>
                    </p:IsGreaterThan.Left>
                    <p:IsGreaterThan.Right>
                      <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="0" />
                    </p:IsGreaterThan.Right>
                  </p:IsGreaterThan>
                </p:ExpressionContainerValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence>
                <p1:LookupSPUser DisplayName="LookupApprover2">
                  <p1:LookupSPUser.PrincipalId>
                    <InArgument x:TypeArguments="x:Int32">
                      <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="Approver2Id">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:Int32" x:Key="Approver2Id">
                            <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID3}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="Approver2Id" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p1:LookupSPUser.PrincipalId>
                  <p1:LookupSPUser.Result>
                    <OutArgument x:TypeArguments="p:DynamicValue">
                      <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dv_2">
                        <p:ExpressionContainerReference.Arguments>
                          <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dv_2">
                            <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID21}" />
                          </InOutArgument>
                        </p:ExpressionContainerReference.Arguments>
                        <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dv_2" />
                      </p:ExpressionContainerReference>
                    </OutArgument>
                  </p1:LookupSPUser.Result>
                </p1:LookupSPUser>
                <p:GetODataProperties DisplayName="GetApprover2">
                  <p:GetODataProperties.Source>
                    <InArgument x:TypeArguments="p:DynamicValue">
                      <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dv_2">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="p:DynamicValue" x:Key="dv_2">
                            <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID21}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dv_2" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p:GetODataProperties.Source>
                  <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                    <OutArgument x:TypeArguments="x:String" x:Key="Email">
                      <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="Approver2Email">
                        <p:ExpressionContainerReference.Arguments>
                          <InOutArgument x:TypeArguments="x:String" x:Key="Approver2Email">
                            <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID22}" />
                          </InOutArgument>
                        </p:ExpressionContainerReference.Arguments>
                        <ArgumentReference x:TypeArguments="x:String" ArgumentName="Approver2Email" />
                      </p:ExpressionContainerReference>
                    </OutArgument>
                    <OutArgument x:TypeArguments="x:String" x:Key="Title">
                      <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="Approver2Text">
                        <p:ExpressionContainerReference.Arguments>
                          <InOutArgument x:TypeArguments="x:String" x:Key="Approver2Text">
                            <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                          </InOutArgument>
                        </p:ExpressionContainerReference.Arguments>
                        <ArgumentReference x:TypeArguments="x:String" ArgumentName="Approver2Text" />
                      </p:ExpressionContainerReference>
                    </OutArgument>
                  </scg:Dictionary>
                </p:GetODataProperties>
                <p1:WriteToHistory>
                  <p1:WriteToHistory.Message>
                    <InArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Approver 2 Email &quot; + Approver2Email">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="Approver2Email">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID22}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <p:ConcatString>
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="Approver 2 Email " />
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="Approver2Email" />
                          </InArgument>
                        </p:ConcatString>
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p1:WriteToHistory.Message>
                </p1:WriteToHistory>
              </Sequence>
            </If.Then>
          </If>
          <If DisplayName="Check Approver 2">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="Approver1StatusText == &quot;Approved&quot; &amp;&amp; Approver2Id &gt; 0 &amp;&amp; Approver2StatusText == &quot;Pending Approval&quot;">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="Approver1StatusText">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID5}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:Int32" x:Key="Approver2Id">
                      <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID3}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="Approver2StatusText">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID6}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <p:And>
                    <p:And.Left>
                      <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                        <p:And>
                          <p:And.Left>
                            <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                              <p:IsEqualString Pattern="{x:Null}" Text="Approved">
                                <p:IsEqualString.Input>
                                  <InArgument x:TypeArguments="x:String">
                                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="Approver1StatusText" />
                                  </InArgument>
                                </p:IsEqualString.Input>
                                <p:IsEqualString.Result>
                                  <OutArgument x:TypeArguments="x:Boolean" />
                                </p:IsEqualString.Result>
                              </p:IsEqualString>
                            </InArgument>
                          </p:And.Left>
                          <p:And.Right>
                            <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                              <p:IsGreaterThan x:TypeArguments="x:Int32">
                                <p:IsGreaterThan.Left>
                                  <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                                    <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="Approver2Id" />
                                  </InArgument>
                                </p:IsGreaterThan.Left>
                                <p:IsGreaterThan.Result>
                                  <OutArgument x:TypeArguments="x:Boolean" />
                                </p:IsGreaterThan.Result>
                                <p:IsGreaterThan.Right>
                                  <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="0" />
                                </p:IsGreaterThan.Right>
                              </p:IsGreaterThan>
                            </InArgument>
                          </p:And.Right>
                        </p:And>
                      </InArgument>
                    </p:And.Left>
                    <p:And.Right>
                      <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                        <p:IsEqualString Pattern="{x:Null}" Text="Pending Approval">
                          <p:IsEqualString.Input>
                            <InArgument x:TypeArguments="x:String">
                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="Approver2StatusText" />
                            </InArgument>
                          </p:IsEqualString.Input>
                        </p:IsEqualString>
                      </InArgument>
                    </p:And.Right>
                  </p:And>
                </p:ExpressionContainerValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence>
                <p1:WriteToHistory Message="Inside Approver 2 Pending" />
                <p:BuildCollection x:TypeArguments="x:String">
                  <p:BuildCollection.Result>
                    <OutArgument x:TypeArguments="sco:Collection(x:String)">
                      <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="emaillist">
                        <p:ExpressionContainerReference.Arguments>
                          <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="emaillist">
                            <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID20}" />
                          </InOutArgument>
                        </p:ExpressionContainerReference.Arguments>
                        <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="emaillist" />
                      </p:ExpressionContainerReference>
                    </OutArgument>
                  </p:BuildCollection.Result>
                  <p:BuildCollection.Values>
                    <InArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="Approver2Email">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="Approver2Email">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID22}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="Approver2Email" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p:BuildCollection.Values>
                </p:BuildCollection>
                <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" CC="{x:Null}">
                  <p1:Email.Body>
                    <InArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="RequestedByName + &quot; is requesting time off. \n\n Time off request details - \n Time off Type: &quot; + timeOffType + &quot;\n Start Date: &quot; + startDate.ToString() + &quot;\n End Date: &quot; + endDate.ToString() + &quot;\n\n Approver 1 &quot; + Approver1Text + &quot; has approved\n\n Approve or Deny the request by copy and paste the url below in your browser:\n\n&quot; + approverUrl">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="RequestedByName">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID16}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="timeOffType">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID12}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:Object" x:Key="startDate">
                            <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID9}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:Object" x:Key="endDate">
                            <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID10}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="Approver1Text">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID19}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="approverUrl">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID11}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <p:ConcatString>
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                            <p:ConcatString>
                              <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                <p:ConcatString>
                                  <p:ConcatString.Result>
                                    <OutArgument x:TypeArguments="x:String" />
                                  </p:ConcatString.Result>
                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                    <p:ConcatString>
                                      <p:ConcatString.Result>
                                        <OutArgument x:TypeArguments="x:String" />
                                      </p:ConcatString.Result>
                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                        <p:ConcatString>
                                          <p:ConcatString.Result>
                                            <OutArgument x:TypeArguments="x:String" />
                                          </p:ConcatString.Result>
                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                            <p:ConcatString>
                                              <p:ConcatString.Result>
                                                <OutArgument x:TypeArguments="x:String" />
                                              </p:ConcatString.Result>
                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                <p:ConcatString>
                                                  <p:ConcatString.Result>
                                                    <OutArgument x:TypeArguments="x:String" />
                                                  </p:ConcatString.Result>
                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                    <p:ConcatString>
                                                      <p:ConcatString.Result>
                                                        <OutArgument x:TypeArguments="x:String" />
                                                      </p:ConcatString.Result>
                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                        <p:ConcatString>
                                                          <p:ConcatString.Result>
                                                            <OutArgument x:TypeArguments="x:String" />
                                                          </p:ConcatString.Result>
                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                            <p:ConcatString>
                                                              <p:ConcatString.Result>
                                                                <OutArgument x:TypeArguments="x:String" />
                                                              </p:ConcatString.Result>
                                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestedByName" />
                                                              </InArgument>
                                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression=" is requesting time off. &#xA;&#xA; Time off request details - &#xA; Time off Type: " />
                                                            </p:ConcatString>
                                                          </InArgument>
                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="timeOffType" />
                                                          </InArgument>
                                                        </p:ConcatString>
                                                      </InArgument>
                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xA; Start Date: " />
                                                    </p:ConcatString>
                                                  </InArgument>
                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                    <p:ToString CultureName="{x:Null}" Format="{x:Null}">
                                                      <p:ToString.Result>
                                                        <OutArgument x:TypeArguments="x:String" />
                                                      </p:ToString.Result>
                                                      <InArgument x:TypeArguments="x:Object">
                                                        <ArgumentValue x:TypeArguments="x:Object" ArgumentName="startDate" />
                                                      </InArgument>
                                                    </p:ToString>
                                                  </InArgument>
                                                </p:ConcatString>
                                              </InArgument>
                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xA; End Date: " />
                                            </p:ConcatString>
                                          </InArgument>
                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                            <p:ToString CultureName="{x:Null}" Format="{x:Null}">
                                              <p:ToString.Result>
                                                <OutArgument x:TypeArguments="x:String" />
                                              </p:ToString.Result>
                                              <InArgument x:TypeArguments="x:Object">
                                                <ArgumentValue x:TypeArguments="x:Object" ArgumentName="endDate" />
                                              </InArgument>
                                            </p:ToString>
                                          </InArgument>
                                        </p:ConcatString>
                                      </InArgument>
                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xA;&#xA; Approver 1 " />
                                    </p:ConcatString>
                                  </InArgument>
                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="Approver1Text" />
                                  </InArgument>
                                </p:ConcatString>
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression=" has approved&#xA;&#xA; Approve or Deny the request by copy and paste the url below in your browser:&#xA;&#xA;" />
                            </p:ConcatString>
                          </InArgument>
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="approverUrl" />
                          </InArgument>
                        </p:ConcatString>
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p1:Email.Body>
                  <p1:Email.Subject>
                    <InArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Request for Time off approval by &quot; + RequestedByName">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="RequestedByName">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID16}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <p:ConcatString>
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="Request for Time off approval by " />
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestedByName" />
                          </InArgument>
                        </p:ConcatString>
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p1:Email.Subject>
                  <p1:Email.To>
                    <InArgument x:TypeArguments="sco:Collection(x:String)">
                      <p:ExpressionContainerValue x:TypeArguments="sco:Collection(x:String)" DisplayName="emaillist">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="emaillist">
                            <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID20}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="emaillist" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p1:Email.To>
                </p1:Email>
                <p1:WriteToHistory Message="After approver 2 Email" />
              </Sequence>
            </If.Then>
          </If>
          <p1:WriteToHistory Message="After approver 2 Approved - before Approver 3 check" />
          <If DisplayName="Check Approver 3">
            <If.Condition>
              <InArgument x:TypeArguments="x:Boolean">
                <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="Approver2StatusText == &quot;Approved&quot; &amp;&amp; Approver3Id &gt; 0 &amp;&amp; Approver3StatusText == &quot;Pending Approval&quot;">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="Approver2StatusText">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID6}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:Int32" x:Key="Approver3Id">
                      <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID4}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" x:Key="Approver3StatusText">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID7}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <p:And>
                    <p:And.Left>
                      <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                        <p:And>
                          <p:And.Left>
                            <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                              <p:IsEqualString Pattern="{x:Null}" Text="Approved">
                                <p:IsEqualString.Input>
                                  <InArgument x:TypeArguments="x:String">
                                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="Approver2StatusText" />
                                  </InArgument>
                                </p:IsEqualString.Input>
                                <p:IsEqualString.Result>
                                  <OutArgument x:TypeArguments="x:Boolean" />
                                </p:IsEqualString.Result>
                              </p:IsEqualString>
                            </InArgument>
                          </p:And.Left>
                          <p:And.Right>
                            <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                              <p:IsGreaterThan x:TypeArguments="x:Int32">
                                <p:IsGreaterThan.Left>
                                  <InArgument x:TypeArguments="x:Int32" EvaluationOrder="0">
                                    <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="Approver3Id" />
                                  </InArgument>
                                </p:IsGreaterThan.Left>
                                <p:IsGreaterThan.Result>
                                  <OutArgument x:TypeArguments="x:Boolean" />
                                </p:IsGreaterThan.Result>
                                <p:IsGreaterThan.Right>
                                  <InArgument x:TypeArguments="x:Int32" EvaluationOrder="1" Expression="0" />
                                </p:IsGreaterThan.Right>
                              </p:IsGreaterThan>
                            </InArgument>
                          </p:And.Right>
                        </p:And>
                      </InArgument>
                    </p:And.Left>
                    <p:And.Right>
                      <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                        <p:IsEqualString Pattern="{x:Null}" Text="Pending Approval">
                          <p:IsEqualString.Input>
                            <InArgument x:TypeArguments="x:String">
                              <ArgumentValue x:TypeArguments="x:String" ArgumentName="Approver3StatusText" />
                            </InArgument>
                          </p:IsEqualString.Input>
                        </p:IsEqualString>
                      </InArgument>
                    </p:And.Right>
                  </p:And>
                </p:ExpressionContainerValue>
              </InArgument>
            </If.Condition>
            <If.Then>
              <Sequence>
                <p1:WriteToHistory Message="Inside Approver 3 Pending" />
                <p1:LookupSPUser DisplayName="LookupApprover3">
                  <p1:LookupSPUser.PrincipalId>
                    <InArgument x:TypeArguments="x:Int32">
                      <p:ExpressionContainerValue x:TypeArguments="x:Int32" DisplayName="Approver3Id">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:Int32" x:Key="Approver3Id">
                            <VariableValue x:TypeArguments="x:Int32" Variable="{x:Reference __ReferenceID4}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="x:Int32" ArgumentName="Approver3Id" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p1:LookupSPUser.PrincipalId>
                  <p1:LookupSPUser.Result>
                    <OutArgument x:TypeArguments="p:DynamicValue">
                      <p:ExpressionContainerReference x:TypeArguments="p:DynamicValue" DisplayName="dv_3">
                        <p:ExpressionContainerReference.Arguments>
                          <InOutArgument x:TypeArguments="p:DynamicValue" x:Key="dv_3">
                            <VariableReference x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID24}" />
                          </InOutArgument>
                        </p:ExpressionContainerReference.Arguments>
                        <ArgumentReference x:TypeArguments="p:DynamicValue" ArgumentName="dv_3" />
                      </p:ExpressionContainerReference>
                    </OutArgument>
                  </p1:LookupSPUser.Result>
                </p1:LookupSPUser>
                <p:GetODataProperties DisplayName="GetApprover3">
                  <p:GetODataProperties.Source>
                    <InArgument x:TypeArguments="p:DynamicValue">
                      <p:ExpressionContainerValue x:TypeArguments="p:DynamicValue" DisplayName="dv_3">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="p:DynamicValue" x:Key="dv_3">
                            <VariableValue x:TypeArguments="p:DynamicValue" Variable="{x:Reference __ReferenceID24}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="p:DynamicValue" ArgumentName="dv_3" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p:GetODataProperties.Source>
                  <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                    <OutArgument x:TypeArguments="x:String" x:Key="Email">
                      <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="Approver3Email">
                        <p:ExpressionContainerReference.Arguments>
                          <InOutArgument x:TypeArguments="x:String" x:Key="Approver3Email">
                            <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID25}" />
                          </InOutArgument>
                        </p:ExpressionContainerReference.Arguments>
                        <ArgumentReference x:TypeArguments="x:String" ArgumentName="Approver3Email" />
                      </p:ExpressionContainerReference>
                    </OutArgument>
                    <OutArgument x:TypeArguments="x:String" x:Key="Title">
                      <p:ExpressionContainerReference x:TypeArguments="x:String" DisplayName="Approver3Text">
                        <p:ExpressionContainerReference.Arguments>
                          <InOutArgument x:TypeArguments="x:String" x:Key="Approver3Text">
                            <VariableReference x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID26}" />
                          </InOutArgument>
                        </p:ExpressionContainerReference.Arguments>
                        <ArgumentReference x:TypeArguments="x:String" ArgumentName="Approver3Text" />
                      </p:ExpressionContainerReference>
                    </OutArgument>
                  </scg:Dictionary>
                </p:GetODataProperties>
                <p1:WriteToHistory>
                  <p1:WriteToHistory.Message>
                    <InArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Approver 3 Email &quot; + Approver3Email">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="Approver3Email">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID25}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <p:ConcatString>
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="Approver 3 Email " />
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="Approver3Email" />
                          </InArgument>
                        </p:ConcatString>
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p1:WriteToHistory.Message>
                </p1:WriteToHistory>
                <p:BuildCollection x:TypeArguments="x:String">
                  <p:BuildCollection.Result>
                    <OutArgument x:TypeArguments="sco:Collection(x:String)">
                      <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="emaillist">
                        <p:ExpressionContainerReference.Arguments>
                          <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="emaillist">
                            <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID20}" />
                          </InOutArgument>
                        </p:ExpressionContainerReference.Arguments>
                        <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="emaillist" />
                      </p:ExpressionContainerReference>
                    </OutArgument>
                  </p:BuildCollection.Result>
                  <p:BuildCollection.Values>
                    <InArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="Approver3Email">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="Approver3Email">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID25}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="Approver3Email" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p:BuildCollection.Values>
                </p:BuildCollection>
                <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" CC="{x:Null}">
                  <p1:Email.Body>
                    <InArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="RequestedByName + &quot; is requesting time off. \n\n Time off request details-\n Time off Type: &quot; + timeOffType + &quot;\n Start Date: &quot; + startDate.ToString() + &quot;\n End Date: &quot; + endDate.ToString() + &quot;\n\n Approver 1 &quot; + Approver1Text + &quot; and Approver 2 &quot; + Approver2Text + &quot; have approved\n\n Approve or Deny the request by copy and paste the url below in your browser:\n\n&quot; + approverUrl">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="RequestedByName">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID16}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="timeOffType">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID12}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:Object" x:Key="startDate">
                            <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID9}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:Object" x:Key="endDate">
                            <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID10}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="Approver1Text">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID19}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="Approver2Text">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID23}" />
                          </InArgument>
                          <InArgument x:TypeArguments="x:String" x:Key="approverUrl">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID11}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <p:ConcatString>
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                            <p:ConcatString>
                              <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                <p:ConcatString>
                                  <p:ConcatString.Result>
                                    <OutArgument x:TypeArguments="x:String" />
                                  </p:ConcatString.Result>
                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                    <p:ConcatString>
                                      <p:ConcatString.Result>
                                        <OutArgument x:TypeArguments="x:String" />
                                      </p:ConcatString.Result>
                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                        <p:ConcatString>
                                          <p:ConcatString.Result>
                                            <OutArgument x:TypeArguments="x:String" />
                                          </p:ConcatString.Result>
                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                            <p:ConcatString>
                                              <p:ConcatString.Result>
                                                <OutArgument x:TypeArguments="x:String" />
                                              </p:ConcatString.Result>
                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                <p:ConcatString>
                                                  <p:ConcatString.Result>
                                                    <OutArgument x:TypeArguments="x:String" />
                                                  </p:ConcatString.Result>
                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                    <p:ConcatString>
                                                      <p:ConcatString.Result>
                                                        <OutArgument x:TypeArguments="x:String" />
                                                      </p:ConcatString.Result>
                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                        <p:ConcatString>
                                                          <p:ConcatString.Result>
                                                            <OutArgument x:TypeArguments="x:String" />
                                                          </p:ConcatString.Result>
                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                            <p:ConcatString>
                                                              <p:ConcatString.Result>
                                                                <OutArgument x:TypeArguments="x:String" />
                                                              </p:ConcatString.Result>
                                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                <p:ConcatString>
                                                                  <p:ConcatString.Result>
                                                                    <OutArgument x:TypeArguments="x:String" />
                                                                  </p:ConcatString.Result>
                                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                    <p:ConcatString>
                                                                      <p:ConcatString.Result>
                                                                        <OutArgument x:TypeArguments="x:String" />
                                                                      </p:ConcatString.Result>
                                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                                                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestedByName" />
                                                                      </InArgument>
                                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression=" is requesting time off. &#xA;&#xA; Time off request details-&#xA; Time off Type: " />
                                                                    </p:ConcatString>
                                                                  </InArgument>
                                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="timeOffType" />
                                                                  </InArgument>
                                                                </p:ConcatString>
                                                              </InArgument>
                                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xA; Start Date: " />
                                                            </p:ConcatString>
                                                          </InArgument>
                                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                            <p:ToString CultureName="{x:Null}" Format="{x:Null}">
                                                              <p:ToString.Result>
                                                                <OutArgument x:TypeArguments="x:String" />
                                                              </p:ToString.Result>
                                                              <InArgument x:TypeArguments="x:Object">
                                                                <ArgumentValue x:TypeArguments="x:Object" ArgumentName="startDate" />
                                                              </InArgument>
                                                            </p:ToString>
                                                          </InArgument>
                                                        </p:ConcatString>
                                                      </InArgument>
                                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xA; End Date: " />
                                                    </p:ConcatString>
                                                  </InArgument>
                                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                                    <p:ToString CultureName="{x:Null}" Format="{x:Null}">
                                                      <p:ToString.Result>
                                                        <OutArgument x:TypeArguments="x:String" />
                                                      </p:ToString.Result>
                                                      <InArgument x:TypeArguments="x:Object">
                                                        <ArgumentValue x:TypeArguments="x:Object" ArgumentName="endDate" />
                                                      </InArgument>
                                                    </p:ToString>
                                                  </InArgument>
                                                </p:ConcatString>
                                              </InArgument>
                                              <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xA;&#xA; Approver 1 " />
                                            </p:ConcatString>
                                          </InArgument>
                                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="Approver1Text" />
                                          </InArgument>
                                        </p:ConcatString>
                                      </InArgument>
                                      <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression=" and Approver 2 " />
                                    </p:ConcatString>
                                  </InArgument>
                                  <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                    <ArgumentValue x:TypeArguments="x:String" ArgumentName="Approver2Text" />
                                  </InArgument>
                                </p:ConcatString>
                              </InArgument>
                              <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression=" have approved&#xA;&#xA; Approve or Deny the request by copy and paste the url below in your browser:&#xA;&#xA;" />
                            </p:ConcatString>
                          </InArgument>
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="approverUrl" />
                          </InArgument>
                        </p:ConcatString>
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p1:Email.Body>
                  <p1:Email.Subject>
                    <InArgument x:TypeArguments="x:String">
                      <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Request for Time off approval by &quot; + RequestedByName">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="x:String" x:Key="RequestedByName">
                            <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID16}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <p:ConcatString>
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="Request for Time off approval by " />
                          <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestedByName" />
                          </InArgument>
                        </p:ConcatString>
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p1:Email.Subject>
                  <p1:Email.To>
                    <InArgument x:TypeArguments="sco:Collection(x:String)">
                      <p:ExpressionContainerValue x:TypeArguments="sco:Collection(x:String)" DisplayName="emaillist">
                        <p:ExpressionContainerValue.Arguments>
                          <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="emaillist">
                            <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID20}" />
                          </InArgument>
                        </p:ExpressionContainerValue.Arguments>
                        <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="emaillist" />
                      </p:ExpressionContainerValue>
                    </InArgument>
                  </p1:Email.To>
                </p1:Email>
                <p1:WriteToHistory Message="After approver 3 Email" />
              </Sequence>
            </If.Then>
          </If>
        </Sequence>
      </If.Then>
    </If>
    <If>
      <If.Condition>
        <InArgument x:TypeArguments="x:Boolean">
          <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="RequestStatus == &quot;Denied&quot;">
            <p:ExpressionContainerValue.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="RequestStatus">
                <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID1}" />
              </InArgument>
            </p:ExpressionContainerValue.Arguments>
            <p:IsEqualString Pattern="{x:Null}" Text="Denied">
              <p:IsEqualString.Input>
                <InArgument x:TypeArguments="x:String">
                  <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestStatus" />
                </InArgument>
              </p:IsEqualString.Input>
            </p:IsEqualString>
          </p:ExpressionContainerValue>
        </InArgument>
      </If.Condition>
      <If.Then>
        <Sequence>
          <p1:WriteToHistory>
            <p1:WriteToHistory.Message>
              <InArgument x:TypeArguments="x:String">
                <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Request is DENIED Email &quot; + RequestedByEmail">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="RequestedByEmail">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID15}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <p:ConcatString>
                    <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="Request is DENIED Email " />
                    <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestedByEmail" />
                    </InArgument>
                  </p:ConcatString>
                </p:ExpressionContainerValue>
              </InArgument>
            </p1:WriteToHistory.Message>
          </p1:WriteToHistory>
          <p:BuildCollection x:TypeArguments="x:String">
            <p:BuildCollection.Result>
              <OutArgument x:TypeArguments="sco:Collection(x:String)">
                <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="emaillist">
                  <p:ExpressionContainerReference.Arguments>
                    <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="emaillist">
                      <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID20}" />
                    </InOutArgument>
                  </p:ExpressionContainerReference.Arguments>
                  <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="emaillist" />
                </p:ExpressionContainerReference>
              </OutArgument>
            </p:BuildCollection.Result>
            <p:BuildCollection.Values>
              <InArgument x:TypeArguments="x:String">
                <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="RequestedByEmail">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="RequestedByEmail">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID15}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestedByEmail" />
                </p:ExpressionContainerValue>
              </InArgument>
            </p:BuildCollection.Values>
          </p:BuildCollection>
          <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" CC="{x:Null}" Subject="Time off request is DENIED">
            <p1:Email.Body>
              <InArgument x:TypeArguments="x:String">
                <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Your time off request is denied.\n Time off request details:\n Time off Type: &quot; + timeOffType + &quot;\n Start Date: &quot; + startDate.ToString() + &quot;\n End Date: &quot; + endDate.ToString()">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="timeOffType">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID12}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:Object" x:Key="startDate">
                      <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID9}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:Object" x:Key="endDate">
                      <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID10}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <p:ConcatString>
                    <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                      <p:ConcatString>
                        <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                          <p:ConcatString>
                            <p:ConcatString.Result>
                              <OutArgument x:TypeArguments="x:String" />
                            </p:ConcatString.Result>
                            <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                              <p:ConcatString>
                                <p:ConcatString.Result>
                                  <OutArgument x:TypeArguments="x:String" />
                                </p:ConcatString.Result>
                                <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                  <p:ConcatString>
                                    <p:ConcatString.Result>
                                      <OutArgument x:TypeArguments="x:String" />
                                    </p:ConcatString.Result>
                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="Your time off request is denied.&#xA; Time off request details:&#xA; Time off Type: " />
                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="timeOffType" />
                                    </InArgument>
                                  </p:ConcatString>
                                </InArgument>
                                <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xA; Start Date: " />
                              </p:ConcatString>
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                              <p:ToString CultureName="{x:Null}" Format="{x:Null}">
                                <p:ToString.Result>
                                  <OutArgument x:TypeArguments="x:String" />
                                </p:ToString.Result>
                                <InArgument x:TypeArguments="x:Object">
                                  <ArgumentValue x:TypeArguments="x:Object" ArgumentName="startDate" />
                                </InArgument>
                              </p:ToString>
                            </InArgument>
                          </p:ConcatString>
                        </InArgument>
                        <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xA; End Date: " />
                      </p:ConcatString>
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                      <p:ToString>
                        <InArgument x:TypeArguments="x:Object">
                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="endDate" />
                        </InArgument>
                      </p:ToString>
                    </InArgument>
                  </p:ConcatString>
                </p:ExpressionContainerValue>
              </InArgument>
            </p1:Email.Body>
            <p1:Email.To>
              <InArgument x:TypeArguments="sco:Collection(x:String)">
                <p:ExpressionContainerValue x:TypeArguments="sco:Collection(x:String)" DisplayName="emaillist">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="emaillist">
                      <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID20}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="emaillist" />
                </p:ExpressionContainerValue>
              </InArgument>
            </p1:Email.To>
          </p1:Email>
        </Sequence>
      </If.Then>
    </If>
    <If>
      <If.Condition>
        <InArgument x:TypeArguments="x:Boolean">
          <p:ExpressionContainerValue x:TypeArguments="x:Boolean" DisplayName="RequestStatus == &quot;Approved&quot; &amp;&amp; cancelStatus != &quot;Cancel&quot;">
            <p:ExpressionContainerValue.Arguments>
              <InArgument x:TypeArguments="x:String" x:Key="RequestStatus">
                <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID1}" />
              </InArgument>
              <InArgument x:TypeArguments="x:String" x:Key="cancelStatus">
                <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID13}" />
              </InArgument>
            </p:ExpressionContainerValue.Arguments>
            <p:And>
              <p:And.Left>
                <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="0">
                  <p:IsEqualString Pattern="{x:Null}" Text="Approved">
                    <p:IsEqualString.Input>
                      <InArgument x:TypeArguments="x:String">
                        <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestStatus" />
                      </InArgument>
                    </p:IsEqualString.Input>
                  </p:IsEqualString>
                </InArgument>
              </p:And.Left>
              <p:And.Right>
                <InArgument x:TypeArguments="x:Boolean" EvaluationOrder="1">
                  <p:Not>
                    <InArgument x:TypeArguments="x:Boolean">
                      <p:IsEqualString Pattern="{x:Null}" Text="Cancel">
                        <p:IsEqualString.Input>
                          <InArgument x:TypeArguments="x:String">
                            <ArgumentValue x:TypeArguments="x:String" ArgumentName="cancelStatus" />
                          </InArgument>
                        </p:IsEqualString.Input>
                        <p:IsEqualString.Result>
                          <OutArgument x:TypeArguments="x:Boolean" />
                        </p:IsEqualString.Result>
                      </p:IsEqualString>
                    </InArgument>
                  </p:Not>
                </InArgument>
              </p:And.Right>
            </p:And>
          </p:ExpressionContainerValue>
        </InArgument>
      </If.Condition>
      <If.Then>
        <Sequence>
          <p1:WriteToHistory>
            <p1:WriteToHistory.Message>
              <InArgument x:TypeArguments="x:String">
                <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Request is Approved Email &quot; + RequestedByEmail">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="RequestedByEmail">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID15}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <p:ConcatString>
                    <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="Request is Approved Email " />
                    <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestedByEmail" />
                    </InArgument>
                  </p:ConcatString>
                </p:ExpressionContainerValue>
              </InArgument>
            </p1:WriteToHistory.Message>
          </p1:WriteToHistory>
          <p:BuildCollection x:TypeArguments="x:String">
            <p:BuildCollection.Result>
              <OutArgument x:TypeArguments="sco:Collection(x:String)">
                <p:ExpressionContainerReference x:TypeArguments="sco:Collection(x:String)" DisplayName="emaillist">
                  <p:ExpressionContainerReference.Arguments>
                    <InOutArgument x:TypeArguments="sco:Collection(x:String)" x:Key="emaillist">
                      <VariableReference x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID20}" />
                    </InOutArgument>
                  </p:ExpressionContainerReference.Arguments>
                  <ArgumentReference x:TypeArguments="sco:Collection(x:String)" ArgumentName="emaillist" />
                </p:ExpressionContainerReference>
              </OutArgument>
            </p:BuildCollection.Result>
            <p:BuildCollection.Values>
              <InArgument x:TypeArguments="x:String">
                <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="RequestedByEmail">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="RequestedByEmail">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID15}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="x:String" ArgumentName="RequestedByEmail" />
                </p:ExpressionContainerValue>
              </InArgument>
            </p:BuildCollection.Values>
          </p:BuildCollection>
          <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" CC="{x:Null}" Subject="Time off request is APPROVED">
            <p1:Email.Body>
              <InArgument x:TypeArguments="x:String">
                <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Your time off request is approved.\n Time off request details:\n Time off Type: &quot; + timeOffType + &quot;\n Start Date: &quot; + startDate.ToString() + &quot;\n End Date: &quot; + endDate.ToString()">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="x:String" x:Key="timeOffType">
                      <VariableValue x:TypeArguments="x:String" Variable="{x:Reference __ReferenceID12}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:Object" x:Key="startDate">
                      <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID9}" />
                    </InArgument>
                    <InArgument x:TypeArguments="x:Object" x:Key="endDate">
                      <VariableValue x:TypeArguments="x:Object" Variable="{x:Reference __ReferenceID10}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <p:ConcatString>
                    <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                      <p:ConcatString>
                        <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                          <p:ConcatString>
                            <p:ConcatString.Result>
                              <OutArgument x:TypeArguments="x:String" />
                            </p:ConcatString.Result>
                            <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                              <p:ConcatString>
                                <p:ConcatString.Result>
                                  <OutArgument x:TypeArguments="x:String" />
                                </p:ConcatString.Result>
                                <InArgument x:TypeArguments="x:String" EvaluationOrder="1">
                                  <p:ConcatString>
                                    <p:ConcatString.Result>
                                      <OutArgument x:TypeArguments="x:String" />
                                    </p:ConcatString.Result>
                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="1" Expression="Your time off request is approved.&#xA; Time off request details:&#xA; Time off Type: " />
                                    <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                                      <ArgumentValue x:TypeArguments="x:String" ArgumentName="timeOffType" />
                                    </InArgument>
                                  </p:ConcatString>
                                </InArgument>
                                <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xA; Start Date: " />
                              </p:ConcatString>
                            </InArgument>
                            <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                              <p:ToString CultureName="{x:Null}" Format="{x:Null}">
                                <p:ToString.Result>
                                  <OutArgument x:TypeArguments="x:String" />
                                </p:ToString.Result>
                                <InArgument x:TypeArguments="x:Object">
                                  <ArgumentValue x:TypeArguments="x:Object" ArgumentName="startDate" />
                                </InArgument>
                              </p:ToString>
                            </InArgument>
                          </p:ConcatString>
                        </InArgument>
                        <InArgument x:TypeArguments="x:String" EvaluationOrder="2" Expression="&#xA; End Date: " />
                      </p:ConcatString>
                    </InArgument>
                    <InArgument x:TypeArguments="x:String" EvaluationOrder="2">
                      <p:ToString>
                        <InArgument x:TypeArguments="x:Object">
                          <ArgumentValue x:TypeArguments="x:Object" ArgumentName="endDate" />
                        </InArgument>
                      </p:ToString>
                    </InArgument>
                  </p:ConcatString>
                </p:ExpressionContainerValue>
              </InArgument>
            </p1:Email.Body>
            <p1:Email.To>
              <InArgument x:TypeArguments="sco:Collection(x:String)">
                <p:ExpressionContainerValue x:TypeArguments="sco:Collection(x:String)" DisplayName="emaillist">
                  <p:ExpressionContainerValue.Arguments>
                    <InArgument x:TypeArguments="sco:Collection(x:String)" x:Key="emaillist">
                      <VariableValue x:TypeArguments="sco:Collection(x:String)" Variable="{x:Reference __ReferenceID20}" />
                    </InArgument>
                  </p:ExpressionContainerValue.Arguments>
                  <ArgumentValue x:TypeArguments="sco:Collection(x:String)" ArgumentName="emaillist" />
                </p:ExpressionContainerValue>
              </InArgument>
            </p1:Email.To>
          </p1:Email>
          <p1:LookupSPListItemId PropertyValue="DepartmentCalendar">
            <p1:LookupSPListItemId.ListId>
              <InArgument x:TypeArguments="s:Guid">
                <p:ExpressionContainerValue x:TypeArguments="s:Guid" DisplayName="System.Guid.Parse(&quot;{$ListId:Lists/ConfigList;}&quot;)">
                  <p:ParseGuid Value="{}{$ListId:Lists/ConfigList;}" />
                </p:ExpressionContainerValue>
              </InArgument>
            </p1:LookupSPListItemId.ListId>
            <p1:LookupSPListItemId.PropertyName>
              <InArgument x:TypeArguments="x:String">
                <p:ExpressionContainerValue x:TypeArguments="x:String" DisplayName="&quot;Key&quot;" Expression="Key" />
              </InArgument>
            </p1:LookupSPListItemId.PropertyName>
          </p1:LookupSPListItemId>
        </Sequence>
      </If.Then>
    </If>
  </Sequence>
</Activity>