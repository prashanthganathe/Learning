<?xml version="1.0" encoding="utf-8"?>
<ctc:Workflow xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:ctc="clr-namespace:Cloudbearing.TimeOffRequest.CancelTimeOffWorkflow;assembly=Cloudbearing.TimeOffRequest" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:msdad="clr-namespace:Microsoft.SharePoint.DesignTime.Activities.Design;assembly=Microsoft.SharePoint.DesignTime.Activities.Design" xmlns:p="http://schemas.microsoft.com/workflow/2012/07/xaml/activities" xmlns:p1="wf://workflow.windows.net/$Activities" xmlns:s="clr-namespace:System;assembly=mscorlib" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Text</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>AjaxMin</AssemblyReference>
      <AssemblyReference>Microsoft.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.SharePoint.DesignTime.Activities</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>Cloudbearing.TimeOffRequestWeb</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>Cloudbearing.TimeOffRequest</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <ctc:Workflow.Implementation>
    <Sequence DisplayName="Stage 1">
      <Sequence.Variables>
        <Variable x:TypeArguments="p:DynamicValue" Name="dv_0" />
        <Variable x:TypeArguments="x:String" Default="Default" Name="RequestStatus" />
        <Variable x:TypeArguments="x:String" Name="Approver1Text" />
        <Variable x:TypeArguments="x:String" Name="Approver2Text" />
        <Variable x:TypeArguments="x:String" Name="Approver3Text" />
        <Variable x:TypeArguments="x:String" Name="RequestedName" />
        <Variable x:TypeArguments="x:String" Name="Approver1StatusText" />
        <Variable x:TypeArguments="x:String" Name="Approver2StatusText" />
        <Variable x:TypeArguments="x:String" Name="Approver3StatusText" />
        <Variable x:TypeArguments="x:String" Name="Approver1Email" />
        <Variable x:TypeArguments="x:Int32" Name="RequestedBy" />
        <Variable x:TypeArguments="x:Int32" Name="Approver1Id" />
        <Variable x:TypeArguments="p:DynamicValue" Name="dv_1" />
        <Variable x:TypeArguments="x:Int32" Name="Approver2Id" />
        <Variable x:TypeArguments="x:Int32" Name="Approver3Id" />
        <Variable x:TypeArguments="x:String" Name="Approver2Email" />
        <Variable x:TypeArguments="x:String" Name="Approver3Email" />
        <Variable x:TypeArguments="x:String" Name="RequestedByName" />
        <Variable x:TypeArguments="x:String" Name="RequestedByEmail" />
        <Variable x:TypeArguments="p:DynamicValue" Name="dv_2" />
        <Variable x:TypeArguments="p:DynamicValue" Name="dv_3" />
        <Variable x:TypeArguments="p:DynamicValue" Name="dv_4" />
        <Variable x:TypeArguments="s:DateTime" Name="startDate" />
        <Variable x:TypeArguments="s:DateTime" Name="endDate" />
        <Variable x:TypeArguments="x:String" Name="approverUrl" />
        <Variable x:TypeArguments="x:String" Name="timeOffType" />
        <Variable x:TypeArguments="sco:Collection(x:String)" Name="emaillist" />
        <Variable x:TypeArguments="x:Int32" Name="keyIdDeptCalendar" />
        <Variable x:TypeArguments="x:String" Name="cancelStatus" />
        <Variable x:TypeArguments="x:String" Name="RequestID" />
      </Sequence.Variables>
      <p1:LookupSPListItem ItemGuid="{x:Null}" Properties="{x:Null}">
        <p1:LookupSPListItem.ItemId>
          <InArgument x:TypeArguments="x:Int32">
            <p:ExpressionContainerValue x:TypeArguments="x:Int32">
              <p1:GetCurrentItemId />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:LookupSPListItem.ItemId>
        <p1:LookupSPListItem.ListId>
          <InArgument x:TypeArguments="s:Guid">
            <p:ExpressionContainerValue x:TypeArguments="s:Guid">
              <p1:GetCurrentListId />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:LookupSPListItem.ListId>
        <p1:LookupSPListItem.Result>
          <OutArgument x:TypeArguments="p:DynamicValue">
            <mca:CSharpReference x:TypeArguments="p:DynamicValue">dv_0</mca:CSharpReference>
          </OutArgument>
        </p1:LookupSPListItem.Result>
      </p1:LookupSPListItem>
      <p1:WriteToHistory Message="After Lookup" />
      <p:GetODataProperties DisplayName="GetDynamicValueProperties">
        <p:GetODataProperties.Source>
          <InArgument x:TypeArguments="p:DynamicValue">
            <mca:CSharpValue x:TypeArguments="p:DynamicValue">dv_0</mca:CSharpValue>
          </InArgument>
        </p:GetODataProperties.Source>
        <scg:Dictionary x:TypeArguments="x:String, OutArgument">
          <OutArgument x:TypeArguments="x:String" x:Key="Status">
            <mca:CSharpReference x:TypeArguments="x:String">RequestStatus</mca:CSharpReference>
          </OutArgument>
          <OutArgument x:TypeArguments="x:Int32" x:Key="Approver1Id">
            <mca:CSharpReference x:TypeArguments="x:Int32">Approver1Id</mca:CSharpReference>
          </OutArgument>
          <OutArgument x:TypeArguments="x:Int32" x:Key="Approver2Id">
            <mca:CSharpReference x:TypeArguments="x:Int32">Approver2Id</mca:CSharpReference>
          </OutArgument>
          <OutArgument x:TypeArguments="x:Int32" x:Key="Approver3Id">
            <mca:CSharpReference x:TypeArguments="x:Int32">Approver3Id</mca:CSharpReference>
          </OutArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="Approver1Status">
            <mca:CSharpReference x:TypeArguments="x:String">Approver1StatusText</mca:CSharpReference>
          </OutArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="Approver2Status">
            <mca:CSharpReference x:TypeArguments="x:String">Approver2StatusText</mca:CSharpReference>
          </OutArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="Approver3Status">
            <mca:CSharpReference x:TypeArguments="x:String">Approver3StatusText</mca:CSharpReference>
          </OutArgument>
          <OutArgument x:TypeArguments="x:Int32" x:Key="RequestedById">
            <mca:CSharpReference x:TypeArguments="x:Int32">RequestedBy</mca:CSharpReference>
          </OutArgument>
          <OutArgument x:TypeArguments="s:DateTime" x:Key="StartDateTime">
            <mca:CSharpReference x:TypeArguments="s:DateTime">startDate</mca:CSharpReference>
          </OutArgument>
          <OutArgument x:TypeArguments="s:DateTime" x:Key="EndDateTime">
            <mca:CSharpReference x:TypeArguments="s:DateTime">endDate</mca:CSharpReference>
          </OutArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="ApproverUrl">
            <mca:CSharpReference x:TypeArguments="x:String">approverUrl</mca:CSharpReference>
          </OutArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="TimeOffType">
            <mca:CSharpReference x:TypeArguments="x:String">timeOffType</mca:CSharpReference>
          </OutArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="CancelStatus">
            <mca:CSharpReference x:TypeArguments="x:String">cancelStatus</mca:CSharpReference>
          </OutArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="Id">
            <mca:CSharpReference x:TypeArguments="x:String">RequestID</mca:CSharpReference>
          </OutArgument>
        </scg:Dictionary>
      </p:GetODataProperties>
      <p1:LookupSPUser DisplayName="LookupRequester">
        <p1:LookupSPUser.PrincipalId>
          <InArgument x:TypeArguments="x:Int32">
            <mca:CSharpValue x:TypeArguments="x:Int32">RequestedBy</mca:CSharpValue>
          </InArgument>
        </p1:LookupSPUser.PrincipalId>
        <p1:LookupSPUser.Result>
          <OutArgument x:TypeArguments="p:DynamicValue">
            <mca:CSharpReference x:TypeArguments="p:DynamicValue">dv_4</mca:CSharpReference>
          </OutArgument>
        </p1:LookupSPUser.Result>
      </p1:LookupSPUser>
      <p:GetODataProperties DisplayName="GetRequester">
        <p:GetODataProperties.Source>
          <InArgument x:TypeArguments="p:DynamicValue">
            <mca:CSharpValue x:TypeArguments="p:DynamicValue">dv_4</mca:CSharpValue>
          </InArgument>
        </p:GetODataProperties.Source>
        <scg:Dictionary x:TypeArguments="x:String, OutArgument">
          <OutArgument x:TypeArguments="x:String" x:Key="Email">
            <mca:CSharpReference x:TypeArguments="x:String">RequestedByEmail</mca:CSharpReference>
          </OutArgument>
          <OutArgument x:TypeArguments="x:String" x:Key="Title">
            <mca:CSharpReference x:TypeArguments="x:String">RequestedByName</mca:CSharpReference>
          </OutArgument>
        </scg:Dictionary>
      </p:GetODataProperties>
      <p1:WriteToHistory>
        <p1:WriteToHistory.Message>
          <InArgument x:TypeArguments="x:String">
            <mca:CSharpValue x:TypeArguments="x:String">"Request Status:" + RequestStatus + "|Approver 1:" + Approver1Id</mca:CSharpValue>
          </InArgument>
        </p1:WriteToHistory.Message>
      </p1:WriteToHistory>
      <p1:UpdateListItem ItemGuid="{x:Null}" ListItemProperties="{x:Null}">
        <p1:UpdateListItem.ItemId>
          <InArgument x:TypeArguments="x:Int32">
            <p:ExpressionContainerValue x:TypeArguments="x:Int32">
              <p1:GetCurrentItemId />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:UpdateListItem.ItemId>
        <p1:UpdateListItem.ListId>
          <InArgument x:TypeArguments="s:Guid">
            <p:ExpressionContainerValue x:TypeArguments="s:Guid">
              <p1:GetCurrentListId />
            </p:ExpressionContainerValue>
          </InArgument>
        </p1:UpdateListItem.ListId>
        <p1:UpdateListItem.ListItemPropertiesDynamicValue>
          <InArgument x:TypeArguments="p:DynamicValue">
            <p:SetDynamicValueProperties>
              <scg:Dictionary x:TypeArguments="x:String, InArgument">
                <InArgument x:TypeArguments="x:String" x:Key="Title">
                  <mca:CSharpValue x:TypeArguments="x:String">RequestedByName</mca:CSharpValue>
                </InArgument>
              </scg:Dictionary>
            </p:SetDynamicValueProperties>
          </InArgument>
        </p1:UpdateListItem.ListItemPropertiesDynamicValue>
      </p1:UpdateListItem>
      <If>
        <If.Condition>
          <InArgument x:TypeArguments="x:Boolean">
            <mca:CSharpValue x:TypeArguments="x:Boolean">cancelStatus == "Cancel"</mca:CSharpValue>
          </InArgument>
        </If.Condition>
        <If.Then>
          <Sequence>
            <p1:WriteToHistory Message="In cancelStatus==cancel" />
            <If DisplayName="Pending Approval">
              <If.Condition>
                <InArgument x:TypeArguments="x:Boolean">
                  <mca:CSharpValue x:TypeArguments="x:Boolean">RequestStatus == "Pending Approval"</mca:CSharpValue>
                </InArgument>
              </If.Condition>
              <If.Then>
                <Sequence>
                  <Sequence.Variables>
                    <Variable x:TypeArguments="x:Int32" Name="RequestID" />
                  </Sequence.Variables>
                  <p1:WriteToHistory Message="Inside main status Pending Approval" />
                  <p1:LookupSPUser DisplayName="LookupApprover1">
                    <p1:LookupSPUser.PrincipalId>
                      <InArgument x:TypeArguments="x:Int32">
                        <mca:CSharpValue x:TypeArguments="x:Int32">Approver1Id</mca:CSharpValue>
                      </InArgument>
                    </p1:LookupSPUser.PrincipalId>
                    <p1:LookupSPUser.Result>
                      <OutArgument x:TypeArguments="p:DynamicValue">
                        <mca:CSharpReference x:TypeArguments="p:DynamicValue">dv_1</mca:CSharpReference>
                      </OutArgument>
                    </p1:LookupSPUser.Result>
                  </p1:LookupSPUser>
                  <p:GetODataProperties DisplayName="GetApprover1">
                    <p:GetODataProperties.Source>
                      <InArgument x:TypeArguments="p:DynamicValue">
                        <mca:CSharpValue x:TypeArguments="p:DynamicValue">dv_1</mca:CSharpValue>
                      </InArgument>
                    </p:GetODataProperties.Source>
                    <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                      <OutArgument x:TypeArguments="x:String" x:Key="Email">
                        <mca:CSharpReference x:TypeArguments="x:String">Approver1Email</mca:CSharpReference>
                      </OutArgument>
                      <OutArgument x:TypeArguments="x:String" x:Key="Title">
                        <mca:CSharpReference x:TypeArguments="x:String">Approver1Text</mca:CSharpReference>
                      </OutArgument>
                    </scg:Dictionary>
                  </p:GetODataProperties>
                  <If DisplayName="Check Approver 1">
                    <If.Condition>
                      <InArgument x:TypeArguments="x:Boolean">
                        <mca:CSharpValue x:TypeArguments="x:Boolean">Approver1StatusText == "Pending Approval"</mca:CSharpValue>
                      </InArgument>
                    </If.Condition>
                    <If.Then>
                      <Sequence>
                        <Sequence.Variables>
                          <Variable x:TypeArguments="p:DynamicValue" Name="dv_5" />
                        </Sequence.Variables>
                        <p1:WriteToHistory>
                          <p1:WriteToHistory.Message>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">"in approver 1 email" + Approver1Email</mca:CSharpValue>
                            </InArgument>
                          </p1:WriteToHistory.Message>
                        </p1:WriteToHistory>
                        <p:BuildCollection x:TypeArguments="x:String">
                          <p:BuildCollection.Result>
                            <OutArgument x:TypeArguments="sco:Collection(x:String)">
                              <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">emaillist</mca:CSharpReference>
                            </OutArgument>
                          </p:BuildCollection.Result>
                          <p:BuildCollection.Values>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">Approver1Email</mca:CSharpValue>
                            </InArgument>
                          </p:BuildCollection.Values>
                        </p:BuildCollection>
                        <p1:WriteToHistory Message="Sending mail to Approver1 on cancellation" />
                        <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" CC="{x:Null}">
                          <p1:Email.Body>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">RequestedByName + "  Cancelled the pending Time Off request. \n\nTime Off request details -\n Time off Type: " + timeOffType + "\n Start Date: " + startDate.ToString() + "\n End Date: " + endDate.ToString()</mca:CSharpValue>
                            </InArgument>
                          </p1:Email.Body>
                          <p1:Email.Subject>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">"Cancellation of Time Off Request by " + RequestedByName</mca:CSharpValue>
                            </InArgument>
                          </p1:Email.Subject>
                          <p1:Email.To>
                            <InArgument x:TypeArguments="sco:Collection(x:String)">
                              <mca:CSharpValue x:TypeArguments="sco:Collection(x:String)">emaillist</mca:CSharpValue>
                            </InArgument>
                          </p1:Email.To>
                        </p1:Email>
                        <p1:WriteToHistory>
                          <p1:WriteToHistory.Message>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">"Email sent to : " + emaillist[0]</mca:CSharpValue>
                            </InArgument>
                          </p1:WriteToHistory.Message>
                        </p1:WriteToHistory>
                      </Sequence>
                    </If.Then>
                  </If>
                  <p1:WriteToHistory Message="Email sent to Approver1" />
                  <p1:WriteToHistory Message="Deleting current item" />
                  <p1:DeleteListItem ItemGuid="{x:Null}">
                    <p1:DeleteListItem.ItemId>
                      <InArgument x:TypeArguments="x:Int32">
                        <p:ExpressionContainerValue x:TypeArguments="x:Int32">
                          <p1:GetCurrentItemId />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </p1:DeleteListItem.ItemId>
                    <p1:DeleteListItem.ListId>
                      <InArgument x:TypeArguments="s:Guid">
                        <p:ExpressionContainerValue x:TypeArguments="s:Guid">
                          <p1:GetCurrentListId />
                        </p:ExpressionContainerValue>
                      </InArgument>
                    </p1:DeleteListItem.ListId>
                  </p1:DeleteListItem>
                  <p1:WriteToHistory Message="Item has been deleted" />
                </Sequence>
              </If.Then>
              <If.Else>
                <Sequence>
                  <p1:WriteToHistory Message="In cancelStatus==cancel2" />
                  <If DisplayName="IsApproved">
                    <If.Condition>
                      <InArgument x:TypeArguments="x:Boolean">
                        <mca:CSharpValue x:TypeArguments="x:Boolean">RequestStatus == "Approved"</mca:CSharpValue>
                      </InArgument>
                    </If.Condition>
                    <If.Then>
                      <Sequence>
                        <p1:WriteToHistory>
                          <p1:WriteToHistory.Message>
                            <InArgument x:TypeArguments="x:String">
                              <mca:CSharpValue x:TypeArguments="x:String">"Approved Request for Cancellation Email " + RequestedByEmail</mca:CSharpValue>
                            </InArgument>
                          </p1:WriteToHistory.Message>
                        </p1:WriteToHistory>
                        <If DisplayName="If Approver1 Exists">
                          <If.Condition>
                            <InArgument x:TypeArguments="x:Boolean">
                              <mca:CSharpValue x:TypeArguments="x:Boolean">Approver1Id &gt; 0</mca:CSharpValue>
                            </InArgument>
                          </If.Condition>
                          <If.Then>
                            <Sequence>
                              <p1:WriteToHistory Message="Approver1 Exists" />
                              <p1:LookupSPUser DisplayName="LookupApprover1">
                                <p1:LookupSPUser.PrincipalId>
                                  <InArgument x:TypeArguments="x:Int32">
                                    <mca:CSharpValue x:TypeArguments="x:Int32">Approver1Id</mca:CSharpValue>
                                  </InArgument>
                                </p1:LookupSPUser.PrincipalId>
                                <p1:LookupSPUser.Result>
                                  <OutArgument x:TypeArguments="p:DynamicValue">
                                    <mca:CSharpReference x:TypeArguments="p:DynamicValue">dv_1</mca:CSharpReference>
                                  </OutArgument>
                                </p1:LookupSPUser.Result>
                              </p1:LookupSPUser>
                              <p:GetODataProperties DisplayName="GetApprover1">
                                <p:GetODataProperties.Source>
                                  <InArgument x:TypeArguments="p:DynamicValue">
                                    <mca:CSharpValue x:TypeArguments="p:DynamicValue">dv_1</mca:CSharpValue>
                                  </InArgument>
                                </p:GetODataProperties.Source>
                                <scg:Dictionary x:TypeArguments="x:String, OutArgument">
                                  <OutArgument x:TypeArguments="x:String" x:Key="Email">
                                    <mca:CSharpReference x:TypeArguments="x:String">Approver1Email</mca:CSharpReference>
                                  </OutArgument>
                                  <OutArgument x:TypeArguments="x:String" x:Key="Title">
                                    <mca:CSharpReference x:TypeArguments="x:String">Approver1Text</mca:CSharpReference>
                                  </OutArgument>
                                </scg:Dictionary>
                              </p:GetODataProperties>
                              <p:BuildCollection x:TypeArguments="x:String">
                                <p:BuildCollection.Result>
                                  <OutArgument x:TypeArguments="sco:Collection(x:String)">
                                    <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">emaillist</mca:CSharpReference>
                                  </OutArgument>
                                </p:BuildCollection.Result>
                                <p:BuildCollection.Values>
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String">Approver1Email</mca:CSharpValue>
                                  </InArgument>
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String">RequestedByEmail</mca:CSharpValue>
                                  </InArgument>
                                </p:BuildCollection.Values>
                              </p:BuildCollection>
                              <p1:WriteToHistory>
                                <p1:WriteToHistory.Message>
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String" xml:space="preserve">"Requester Email: " +  RequestedByEmail +"\n\n Approver1email: "+ Approver1Email</mca:CSharpValue>
                                  </InArgument>
                                </p1:WriteToHistory.Message>
                              </p1:WriteToHistory>
                              <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" CC="{x:Null}" Subject="Time off request for Cancellation">
                                <p1:Email.Body>
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String">RequestedByName + " is requesting to cancel his Approved Time Off Request.\n Time off request details:\n Time off Type: " + timeOffType + "\n Start Date: " + startDate.ToString() + "\n End Date: " + endDate.ToString() + "\n\n To Proceed with Cancellation of the request, copy and paste the url below in your browser:\n\n" + approverUrl.Replace("ApprovalForm.aspx", "PendingRequestsApprover.aspx")</mca:CSharpValue>
                                  </InArgument>
                                </p1:Email.Body>
                                <p1:Email.To>
                                  <InArgument x:TypeArguments="sco:Collection(x:String)">
                                    <mca:CSharpValue x:TypeArguments="sco:Collection(x:String)">emaillist</mca:CSharpValue>
                                  </InArgument>
                                </p1:Email.To>
                              </p1:Email>
                              <p1:WriteToHistory Message="Email has been sent to Approver1 with url. Approver1 has to cancel the Request by accessing Url given in the mail." />
                            </Sequence>
                          </If.Then>
                          <If.Else>
                            <Sequence DisplayName="Self Approved">
                              <p1:WriteToHistory Message="Approver1 does not Exists" />
                              <p:BuildCollection x:TypeArguments="x:String">
                                <p:BuildCollection.Result>
                                  <OutArgument x:TypeArguments="sco:Collection(x:String)">
                                    <mca:CSharpReference x:TypeArguments="sco:Collection(x:String)">emaillist</mca:CSharpReference>
                                  </OutArgument>
                                </p:BuildCollection.Result>
                                <p:BuildCollection.Values>
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String">RequestedByEmail</mca:CSharpValue>
                                  </InArgument>
                                </p:BuildCollection.Values>
                              </p:BuildCollection>
                              <p1:Email AdditionalHeaders="{x:Null}" BCC="{x:Null}" CC="{x:Null}" Subject="Time off request for Cancellation">
                                <p1:Email.Body>
                                  <InArgument x:TypeArguments="x:String">
                                    <mca:CSharpValue x:TypeArguments="x:String">RequestedByName +" is requesting to cancel his Approved Time Off Request.\n Time off request details:\n Time off Type: " + timeOffType + "\n Start Date: " + startDate.ToString() + "\n End Date: " + endDate.ToString()</mca:CSharpValue>
                                  </InArgument>
                                </p1:Email.Body>
                                <p1:Email.To>
                                  <InArgument x:TypeArguments="sco:Collection(x:String)">
                                    <mca:CSharpValue x:TypeArguments="sco:Collection(x:String)">emaillist</mca:CSharpValue>
                                  </InArgument>
                                </p1:Email.To>
                              </p1:Email>
                              <p1:WriteToHistory Message="Email Sent to Approver1 and Requestor" />
                            </Sequence>
                          </If.Else>
                        </If>
                      </Sequence>
                    </If.Then>
                  </If>
                </Sequence>
              </If.Else>
            </If>
          </Sequence>
        </If.Then>
      </If>
      <sads:DebugSymbol.Symbol>9xCIgfzwXSbbCZvXS46y/tPVYEU6XFNoYXJlcG9pbnRBcHBzXEZlcnJpcyBUaW1lT2ZmXENsb3VkYmVhcmluZy5UaW1lT2ZmUmVxdWVzdFxDYW5jZWxUaW1lT2ZmV29ya2Zsb3dcV29ya2Zsb3cueGFtbIIBKwPVAw4CAQEuNC49AgECTAVgGwMB/w1hBWFkAwH9DWIFlAEcAwGrCpUBBaABFwMB7AmhAQWvARwDAY4JsAEFtgEZAwHuCLcBBdEBGQMBywjSAQXTAwoCAQNWC1goAwGgDl0LXVsDAYEOTwtRKAMBgA5hU2FhAwH+DZEBC5EBWgMB3g1wC3BbAwG/DYgBC4gBXAMBoA2CAQuCAVwDAYENbQttWwMB4gx8C3xkAwHDDI4BC44BXQMBpAyFAQuFAVoDAYUMeQt5ZAMB5guLAQuLAVwDAccLfwt/WwMBqAtqC2peAwGJC3YLdmQDAeoKZQtlUwMBywpzC3NbAwGsCpgBC5gBUwMBjAqdAQudAVsDAe0JqQELqQFhAwHNCaQBC6QBUwMBrgmsAQusAWADAY8JswELswGJAQMB7wjIAQvOASkDAc4IwQELwwEoAwHNCLoBC7wBKAMBzAjVAQvVAWICAQTZAQnRAxQCASNXDVckBAGgDgFQDVAkBAGADgHLARHLAV4DAc8IwgENwgEkBAHNCAG7AQ27ASQEAcwIAdoBC9oBdgMByQjbAQvQAxACASTaAVraAXMDAcoI3gER3gFzAgEl4gEPzwIaAwGMBdICD84DGgIBROYBEeYBhwEDAccI5wER8gEjAwGGCPMBEYECKAMBpQeCAhG7AhYDAZYFvAIRvAJ8AwGUBb0CEb0CegMBkgW+AhHNAiUDAY8FzgIRzgJ6AwGNBdMCEdMCfQMBigXUAhHNAxYCAUXmAV/mAYQBAwHICOoBF+oBXwMBpwjvARfvAWcDAYcI+wEX+wFrAwHmB/YBF/YBXwMBxgf+ARf+AWoDAaYHhQIXhQJ/AwGXBYkCFbkCIAMBtwW8AmC8AnkDAZUFvQJgvQJ3AwGTBcgCF8oCNAMBkQXBAhfDAjQDAZAFzgJgzgJ3AwGOBdMCYNMCegMBiwXXAhfXAnECAUbbAhXLAyACAWWNAheTAisDAYMHlAIXnwIrAwHABqACF6ACkwEDAb4GoQIXsQIiAwHaBbICF7gCKwMBuAXJAhnJAjAEAZEFAcICGcICMAQBkAUB3AIX4gIrAwHqBOMCF8oDHAIBZpACHZACgQEDAYQHnAIdnAJpAwHiBpcCHZcCfAMBwQagAmWgApABAwG/Bq4CHa4CdAMBnQakAh2kAr4CAwH8BakCHakCkwEDAdsFtQIdtQJ8AwG5Bd8CHd8CmAEDAesE5gId5gJuAgFn6gIbqgMmAwGKAq0DG8gDJgMBhgHrAh3rAoEBAwHoBOwCHfcCLwMBqQT4Ah2GAzQDAcsDhwMdlQMxAwHtApYDHZwDMQMBzQKdAx2oAygDAY0CqQMdqQPjAQMBiwKuAx2uA4oBAwGIAq8DHboDMQMByQG7Ax3GAygDAYkBxwMdxwOWAQMBhwHrAmzrAn4DAekE7wIj7wJrAwHJBPQCI/QCcwMBqgSAAyOAA3cDAYoE+wIj+wJrAwHrA4MDI4MDdgMBzAOPAyOPA28DAawDkgMjkgNxAwGNA4oDI4oDggEDAe4CmQMjmQPGAQMBzgKlAyOlA3oDAa4CoAMjoAPtAwMBjwKdA5MBnQO2AQMBjgKpA2ypA+ABAwGMAq4DbK4DhwEDAYkCtwMjtwNxAwHpAbIDI7IDggEDAcoBwwMjwwN6AwGqAb4DI74DuQIDAYsBuwOTAbsDtgEDAYoBxwNsxwOTAQMBiAE=</sads:DebugSymbol.Symbol>
    </Sequence>
  </ctc:Workflow.Implementation>
</ctc:Workflow>